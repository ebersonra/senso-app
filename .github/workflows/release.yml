name: Create Release and Bump Version

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'The type of version bump (major, minor, or patch)'
        required: true
        type: choice
        options:
        - patch
        - minor
        - major
        default: 'patch'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch all history so we can create a release with a changelog
        fetch-depth: 0
        # Use a personal access token so the push will trigger the deploy workflow
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Install dependencies
      run: npm install

    - name: Get current version and calculate new version
      id: get_version
      run: |
        # Get current version from package.json
        current_version=$(node -p "require('./package.json').version")
        echo "current_version=v${current_version}" >> $GITHUB_OUTPUT
        
        # Calculate new version
        if [ "${{ github.event.inputs.version_type }}" = "major" ]; then
          new_version=$(npm version major --no-git-tag-version)
        elif [ "${{ github.event.inputs.version_type }}" = "minor" ]; then
          new_version=$(npm version minor --no-git-tag-version)
        else
          new_version=$(npm version patch --no-git-tag-version)
        fi
        echo "new_version=${new_version}" >> $GITHUB_OUTPUT

    - name: Update version in HTML
      run: |
        # Update the version in the inline script
        new_version="${{ steps.get_version.outputs.new_version }}"
        echo "Updating version to: $new_version"
        sed -i "s/window\.SITE_VERSION = 'v[^']*';/window.SITE_VERSION = '$new_version';/g" index.html
        echo "Verifying replacement:"
        grep "SITE_VERSION" index.html

    - name: Commit version changes and create tag
      id: commit_and_tag
      run: |
        # Add package.json and updated HTML
        git add package.json package-lock.json index.html
        git commit -m "chore(release): new release ${{ steps.get_version.outputs.new_version }}"
        
        # Get the commit SHA
        commit_sha=$(git rev-parse HEAD)
        echo "commit_sha=${commit_sha}" >> $GITHUB_OUTPUT
        
        # Create the tag
        git tag ${{ steps.get_version.outputs.new_version }}

    - name: Push changes and tags to main
      run: |
        # Ensure we're on main branch and push changes with tags
        git checkout main
        git push origin main --follow-tags

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ steps.get_version.outputs.new_version }} \
          --title "Release ${{ steps.get_version.outputs.new_version }}" \
          --notes "A new release has been created. See the commits for details." \
          --target ${{ steps.commit_and_tag.outputs.commit_sha }}